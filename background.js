// background.js

// Создаём пункт меню на иврите
chrome.runtime.onInstalled.addListener(() => {
    chrome.contextMenus.create({
        id: "generate-offer",
        title: "הצעת מחיר", // ← на иврите
        contexts: ["page"]
    });
});

// Обработчик клика по меню
chrome.contextMenus.onClicked.addListener((info, tab) => {
    if (info.menuItemId === "generate-offer") {
        generatePriceOffer(tab.id, tab.url);
    }
});

async function generatePriceOffer(tabId, pageUrl) {
    // Индикатор на странице
    showIndicator(tabId, "מפיק הצעת מחיר...");

    // Получаем текст страницы
    let pageText = "";
    try {
        const results = await chrome.scripting.executeScript({
            target: { tabId: tabId },
            func: () => document.body.innerText || document.documentElement.innerText
        });
        pageText = results?.[0]?.result || "";
    } catch (e) {
        showError(tabId, "שגיאה באיסוף תוכן הדף");
        return;
    }

    if (!pageText || pageText.trim().length < 50) {
        showError(tabId, "הדף ריק מדי");
        return;
    }

    // Получаем API-ключ
    const { geminiApiKey } = await chrome.storage.sync.get('geminiApiKey');
    if (!geminiApiKey) {
        chrome.tabs.create({ url: "https://aistudio.google.com/app/apikey" });
        showError(tabId, "יש להזין מפתח API");
        return;
    }

    // Формируем промпт (на английском, как ты просил)
    const prompt = `
# command instruction for model:

**"Analyze computer components from JSON, classify build type (e.g., gaming, workstation), 
provide titles and descriptions in Hebrew and Russian, translate component details, 
and return structured JSON output. Maintain correct formatting, include confidence scores, 
and follow detailed guidelines for descriptions and component handling."** 

In this prompt, the words \`product\` and \`component\` are synonyms
and refer to a component for assembling a computer.

## response text encoding: \`UTF-8\`

### **Template Response:**  
\`\`\`json
{
  "he": {
    "title": "מחשב גיימינג בעל ביצועים גבוהים",
    "description": "מחשב מודרני למשחקים ותוכנות תובעניים. כולל מעבד Intel i7-14700F, כרטיס מסך Gigabyte RTX 4070, זיכרון RAM DDR4 בנפח 16GB ו-SSD Kingston בנפח 4TB.",
    "build_types": {
      "gaming": 0.9,
      "workstation": 0.1
    },
    "products": [
      {
        "product_id": "auto",
        "product_name": "<product name in hebrew generated by you>",
        "product_description": "<description for product in hebrew generated by you If you don't able to create the specification - leave this field empty>",
        "product_specification": "<specification for product in hebrew generated by you If you don't able to create the specification - leave this field empty>",
        "image_local_saved_path": ""
      }
    ]
  },
  "ru": {
    "title": "Высокопроизводительный игровой компьютер",
    "description": "Современный компьютер для требовательных игр и приложений. Включает Intel i7-14700F, Gigabyte RTX 4070, DDR4 RAM 16GB и SSD Kingston 4TB.",
    "build_types": {
      "gaming": 0.9,
      "workstation": 0.1
    },
    "products": [
      {
        "product_id": "auto",
        "product_name": "<product name in russian generated by you>",
        "product_description": "<description for product in russian generated by you If you don't able to create the specification - leave this field empty>",
        "product_specification": "<specification for product in russian generated by you If you don't able to create the specification - leave this field empty>",
        "image_local_saved_path": ""
      }
    ]
  }
}
\`\`\`
### формат ответа должен полностью соответствовать шаблону
## end command

Текст страницы для анализа:
"""
${pageText.substring(0, 12000)}
"""
`;

    try {
        hideIndicator(tabId);
        const response = await fetch(
            `https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent?key=${geminiApiKey}`,
            {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    contents: [{ parts: [{ text: prompt }] }]
                })
            }
        );

        const data = await response.json();

        if (data.error) {
            throw new Error(data.error.message || "שגיאת API");
        }

        let rawText = data.candidates?.[0]?.content?.parts?.[0]?.text;
        if (!rawText) throw new Error("אין תגובה");

        // Извлекаем JSON из markdown-блока
        const jsonMatch = rawText.match(/```json\s*({[\s\S]*?})\s*```/);
        const jsonStr = jsonMatch ? jsonMatch[1] : rawText;

        let result;
        try {
            result = JSON.parse(jsonStr);
        } catch (e) {
            result = { error: "תגובה לא בפורמט JSON", raw: jsonStr };
        }

        // Сохраняем результат
        await chrome.storage.local.set({
            lastOffer: result,
            offerUrl: pageUrl,
            timestamp: Date.now()
        });

        // Открываем результат
        chrome.tabs.create({ url: chrome.runtime.getURL('result.html') });

    } catch (error) {
        console.error("שגיאה:", error);
        showError(tabId, `שגיאה: ${error.message?.substring(0, 40) || "לא ידוע"}`);
    }
}

// Вспомогательные функции (на иврите)
function showIndicator(tabId, message) {
    chrome.scripting.executeScript({
        target: { tabId },
        func: (msg) => {
            let el = document.getElementById('__offer_indicator__');
            if (el) el.remove();
            el = document.createElement('div');
            el.id = '__offer_indicator__';
            el.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: rgba(0,0,0,0.88);
        color: white;
        padding: 12px 16px;
        border-radius: 8px;
        font-family: system-ui;
        font-size: 14px;
        z-index: 2147483647;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        max-width: 300px;
        text-align: center;
        pointer-events: none;
        direction: rtl;
      `;
            el.textContent = msg;
            document.body.appendChild(el);
        },
        args: [message]
    });
}

function hideIndicator(tabId) {
    chrome.scripting.executeScript({
        target: { tabId },
        func: () => {
            const el = document.getElementById('__offer_indicator__');
            if (el) el.remove();
        }
    });
}

function showError(tabId, message) {
    showIndicator(tabId, message);
    setTimeout(() => hideIndicator(tabId), 4000);
}