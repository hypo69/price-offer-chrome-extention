// json2html.js
// -*- coding: utf-8 -*-

let currentLocalizedMessages = null;

async function getLocalizedMessages(locale) {
    const defaultLocale = 'ru';
    const finalLocale = locale || defaultLocale;

    // –ï—Å–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –ª–æ–∫–∞–ª—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if (currentLocalizedMessages && currentLocalizedMessages.locale === finalLocale) {
        return currentLocalizedMessages.messages;
    }

    const path = `_locales/${finalLocale}/messages.json`;
    try {
        const url = chrome.runtime.getURL(path);
        const res = await fetch(url);
        if (!res.ok) {
            // –ï—Å–ª–∏ –¥–ª—è –Ω—É–∂–Ω–æ–π –ª–æ–∫–∞–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–∞, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä—É—Å—Å–∫–∏–π
            if (finalLocale !== defaultLocale) {
                return getLocalizedMessages(defaultLocale);
            }
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å messages.json –¥–ª—è –ª–æ–∫–∞–ª–∏: ${finalLocale}`);
        }

        const messages = await res.json();
        currentLocalizedMessages = { locale: finalLocale, messages: messages };
        return messages;

    } catch (e) {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏: ${e.message}`);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –∫–ª—é—á–∞–º
        return {};
    }
}

function getMessage(messages, key, fallback = '') {
    if (messages && messages[key] && messages[key].message) {
        return messages[key].message;
    }
    return fallback;
}


async function parseResponseToHtml(rawData) {
    if (!rawData) {
        return '<p class="error-message">–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.</p>';
    }
    let dataObject;
    if (typeof rawData === 'object' && rawData !== null) {
        dataObject = rawData;
    } else if (typeof rawData === 'string') {
        let cleanedString = rawData.trim().replace(/^```json\s*/i, '').replace(/\s*```\s*$/, '').trim();
        try {
            dataObject = JSON.parse(cleanedString);
        } catch (e) {
            return `<p class="error-message">–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ JSON. ${e.message}</p>`;
        }
    } else {
        return `<p class="error-message">–û—à–∏–±–∫–∞: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.</p>`;
    }
    return await renderPcBuildHtml(dataObject);
}

async function renderPcBuildHtml(data) {
    if (typeof data !== 'object' || data === null) {
        return '<p class="error-message">–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º.</p>';
    }

    const urlParams = new URLSearchParams(window.location.search);
    const lang = urlParams.get('lang');

    // –†—É—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ lang
    const messages = await getLocalizedMessages(lang);


    let mainContentHtml = '';

    if (data.title) {
        mainContentHtml += `<h1>${escapeHtml(data.title)}</h1>`;
    }
    if (data.description) {
        mainContentHtml += `<div class="description">${escapeHtml(data.description)}</div>`;
    }
    if (Array.isArray(data.components)) {
        let componentsHtml = '';
        data.components.forEach((product, index) => {
            const name = product.component_name || '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç';
            const desc = product.component_description || '';
            const specArray = product.component_specification || [];
            const imgUrl = product.component_image || 'https://via.placeholder.com/180';
            componentsHtml += `
                <article class="component" id="component-${index + 1}">
                    <h2>${escapeHtml(name)}</h2>
                    <div class="component-row">
                        <img src="${escapeHtml(imgUrl)}" alt="${escapeHtml(name)}">
                        <div class="component-body">
                            <p>${escapeHtml(desc)}</p>
                            ${renderSpecGridFromArray(specArray)}
                        </div>
                    </div>
                </article>`;
        });
        mainContentHtml += `<section aria-label="Components">${componentsHtml}</section>`;
    }

    const footerHtml = await generateServiceFooterHtml();

    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä—É—á–Ω–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ getMessage()
    const totalPriceLabel = getMessage(messages, 'totalPriceLabel', '–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞:');
    const priceLabel = getMessage(messages, 'price', '–¶–µ–Ω–∞');
    const saveButtonText = getMessage(messages, 'saveOfferButton', '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ');
    const changeImageButtonText = getMessage(messages, 'changeImageButton', '–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É');

    const priceDisplayValue = data.price ? `${escapeHtml(data.price)} ‚Ç™` : '...';
    const priceDisplayHtml = `
        <div class="offer-price-display">
            <strong>${totalPriceLabel}</strong>
            <span id="price-display-value">${priceDisplayValue}</span>
        </div>
    `;

    const priceBlockHtml = `
        <div class="price-block">
            <label for="price-input">${priceLabel} (‚Ç™):</label>
            <input type="text" id="price-input" placeholder="${priceLabel}" value="${escapeHtml(data.price || '')}">
            <button id="save-offer-button">${saveButtonText}</button>
            <button id="change-image-button">${changeImageButtonText}</button>
            <button id="save-pdf-button">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ PDF</button>
        </div>
    `;

    return mainContentHtml + footerHtml + priceDisplayHtml + priceBlockHtml;
}

async function generateServiceFooterHtml() {
    try {
        const defaultLocale = 'ru';
        let locale = defaultLocale;

        const urlParams = new URLSearchParams(window.location.search);
        const langFromUrl = urlParams.get('lang');

        if (langFromUrl) {
            locale = langFromUrl;
        }

        const messageUrl = chrome.runtime.getURL(`_locales/${locale}/footer-message.md`);
        let textContent = '';
        try {
            const response = await fetch(messageUrl);
            if (!response.ok) {
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä—É—Å—Å–∫–∏–π
                const fallbackUrl = chrome.runtime.getURL(`_locales/${defaultLocale}/footer-message.md`);
                const fallbackResponse = await fetch(fallbackUrl);
                if (!fallbackResponse.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Ñ—É—Ç–µ—Ä–∞.');
                textContent = await fallbackResponse.text();
            } else {
                textContent = await response.text();
            }
        } catch (fetchError) {
            console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Ñ—É—Ç–µ—Ä–∞:", fetchError);
            return `<p class="error-message">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.</p>`;
        }

        // ‚ñº‚ñº‚ñº –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –õ–û–ì–ò–ö–ò –ü–ê–†–°–ò–ù–ì–ê –§–£–¢–ï–†–ê ‚ñº‚ñº‚ñº
        const lines = textContent.split('\n').map(line => line.trim()).filter(Boolean);
        let htmlContent = '';

        lines.forEach(line => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–≥–∞ <b> –≤ –Ω–∞—á–∞–ª–µ –∏ </b> –≤ –∫–æ–Ω—Ü–µ
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–∂–∞–¥–Ω—ã–π –ø–æ–∏—Å–∫ .*? —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω –ª–æ–≤–∏—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –ø–∞—Ä—É <b>
            const boldMatch = line.match(/^<b>(.*?)<\/b>$/i);

            if (boldMatch) {
                // –≠—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø—É–Ω–∫—Ç). –†–∞–∑—Ä–µ—à–∞–µ–º HTML (–≤ —á–∞—Å—Ç–Ω–æ—Å—Ç–∏, üõ†Ô∏è)
                htmlContent += `<h3>${boldMatch[1]}</h3>`;
            } else if (line.match(/^(-{3,}|={3,})$/)) {
                // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
                htmlContent += `<hr>`;
            } else if (line.match(/^‚úÖ\s*.+/)) {
                // –°—Ç—Ä–æ–∫–∞ —Å —Å–∏–º–≤–æ–ª–æ–º ‚úÖ
                htmlContent += `<p class="footer-highlight">${line}</p>`;
            }
            else {
                // –û–±—ã—á–Ω—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ, —ç—Å–∫–µ–π–ø–∏–º HTML –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º <br> –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
                htmlContent += `<p>${escapeHtml(line)}</p>`;
            }
        });

        const imageUrl = await getRandomImageUrl();

        return `
            <footer class="service-footer">
                <div class="footer-text">${htmlContent}</div>
                <div class="footer-image"><img id="footer-random-image" src="${imageUrl}" alt="Service Illustration"></div>
            </footer>`;

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ—É—Ç–µ—Ä–∞:", error);
        return `<p class="error-message">–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.</p>`;
    }
}

/**
 * –§—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å–µ—Ç–∫–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π
 */
function renderSpecGridFromArray(specArray) {
    if (!Array.isArray(specArray) || specArray.length === 0) return '';
    let gridHtml = '<div class="spec-grid">';
    specArray.forEach(item => {
        const colonIndex = item.indexOf(':');
        if (colonIndex > -1) {
            const key = item.substring(0, colonIndex).trim();
            const value = item.substring(colonIndex + 1).trim();
            gridHtml += `<div>${escapeHtml(key)}</div><div>${escapeHtml(value)}</div>`;
        } else {
            gridHtml += `<div class="spec-full-row">${escapeHtml(item)}</div>`;
        }
    });
    gridHtml += '</div>';
    return gridHtml;
}

async function getRandomImageUrl() {
    let imageUrl = 'https://via.placeholder.com/300x200';
    try {
        const manifestUrl = chrome.runtime.getURL('image-manifest.json');
        const manifestResponse = await fetch(manifestUrl);
        if (!manifestResponse.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å image-manifest.json');
        const imageList = await manifestResponse.json();

        if (Array.isArray(imageList) && imageList.length > 0) {
            const randomImagePath = imageList[Math.floor(Math.random() * imageList.length)];
            imageUrl = chrome.runtime.getURL(randomImagePath);
        }
    } catch (imgError) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", imgError);
    }
    return imageUrl;
}

function escapeHtml(text) {
    if (typeof text !== 'string') return String(text);
    // –≠—Å–∫–µ–π–ø–∏–º –≤–µ—Å—å HTML –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let safeText = text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#039;');

    // –û–±—Ä–∞—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Ñ—É—Ç–µ—Ä–∞)
    // –†–∞–∑—Ä–µ—à–∞–µ–º <b> (–¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ø—É–Ω–∫—Ç–æ–≤ –≤ —Ñ—É—Ç–µ—Ä–µ)
    safeText = safeText.replace(/&lt;b&gt;/gi, '<b>').replace(/&lt;\/b&gt;/gi, '</b>');

    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å <br> –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ –≤–Ω—É—Ç—Ä–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:
    // safeText = safeText.replace(/&lt;br&gt;/gi, '<br>');

    return safeText;
}

window.parseResponseToHtml = parseResponseToHtml;
window.getRandomImageUrl = getRandomImageUrl;